import React, { createContext } from 'react';
import {WebRTCContextType} from './WebRTCTypes';

export const initialValues: WebRTCContextType = {
  localStream: null,
  remoteStreams: new Map(),
  isInitialized: false,
  currentUser: null,
  activeCall: null,
  remoteUser: null,
  participants: [],
  socket: null,
  meetingId: null,
  peerId: '',
  currentMeetingId: null,
  remoteStream: null,
  isMuted: false,
  users: [],
  initialize: () => Promise.resolve(null),
  reset: () => Promise.resolve(),
  createMeeting: () => Promise.resolve(''),
  createMeetingWithSocket: () => Promise.resolve(''),
  joinMeeting: () => Promise.resolve(false),
  refreshParticipantVideo: () => Promise.resolve(),
  setUsername: () => {},
  leaveMeeting: () => {},
  call: () => {},
  closeCall: () => {},
  switchCamera: () => {},
  toggleMute: () => {},
};

export const WebRTCContext = createContext<WebRTCContextType>({
  localStream: null,
  remoteStreams: new Map(),
  isInitialized: false,
  currentUser: null,
  activeCall: null,
  remoteUser: null,
  participants: [],
  socket: null,
  meetingId: null,
  peerId: null,
  currentMeetingId: null,
  remoteStream: null,
  isMuted: false,
  users: [],
  initialize: async () => {},
  reset: async () => {},
  createMeeting: async () => '',
  createMeetingWithSocket: async () => '',
  joinMeeting: async () => false,
  refreshParticipantVideo: async () => {},
  setUsername: () => {},
  leaveMeeting: () => {},
  call: () => {},
  closeCall: () => {},
  switchCamera: () => {},
  toggleMute: () => {},
});
